#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  pistonOne,      sensorDigitalOut)
#pragma config(Sensor, dgtl2,  pistonTwo,      sensorDigitalOut)
#pragma config(Sensor, dgtl3,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl12, ,               sensorTouch)
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           backLeft,      tmotorVex393TurboSpeed_MC29, openLoop, driveRight)
#pragma config(Motor,  port3,           backRight,     tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, None)
#pragma config(Motor,  port4,           liftRight,     tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port5,           liftLeft,      tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port6,            ,             tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, None)
#pragma config(Motor,  port7,            ,             tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, None)
#pragma config(Motor,  port8,           frontLeft,     tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, None)
#pragma config(Motor,  port9,           frontRight,    tmotorVex393TurboSpeed_MC29, openLoop, driveRight)
#pragma config(Motor,  port10,          frictionDrum2, tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"
#define C1LX vexRT[Ch4]
#define C1LY vexRT[Ch3]
#define C1RX vexRT[Ch1]


/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
float k;
void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
			// Back out of the cones
		motor[frontLeft] = 127;
		motor[frontRight] = -127;
		motor[backRight] = -127;
		motor[backLeft] = 127;

		wait1Msec(1000);

		// Translate to the left
		motor[frontLeft] = 127;
		motor[frontRight] = 127;
		motor[backRight] = -127;
		motor[backLeft] = -127;

		wait1Msec(250);

	int i;
	for (i=1; i<=3; i++)
	{
		// Power Up Friction Drum while lowering lift
		motor[liftRight] = 127;
		motor[liftLeft] = 127;

		motor[frictionDrum2] = 60;

		wait10Msec(100);

		// Pull up into friction drum

		motor[liftRight] = 0;
		motor[liftLeft] = 0;


		motor[frictionDrum2] = 60;

		wait10Msec(100);

		// Hold power on friction drum and pull back up
		motor[liftRight] = -127;
		motor[liftLeft] = -127;


		motor[frictionDrum2] = 10;

		wait10Msec(100);

		//Drop on mobile goal
		motor[liftRight] = 0;
		motor[liftLeft] = 0;

		motor[frictionDrum2] = -60;

		wait10Msec(100);

		//Drive Forward
		motor[frontLeft] = -127;
		motor[frontRight] = 127;
		motor[backRight] = 127;
		motor[backLeft] = -127;

		i++;
	}

  	//Preload scoring block start
SensorValue[liftLeft] = 0;
SensorValue[liftRight] = 0;

 		while ((liftLeft < 360) && (liftRight < 360))
 		{
 			motor(liftLeft) = 60;
 			motor(liftRight) = 60;
 		}
 		SensorValue[pistonOne] = 0;
 		SensorValue[pistonTwo] = 0;
 		wait1Msec(500);
 		motor(frictionDrum2) = -60;
 		wait1Msec(500);
 		motor(frictionDrum2) = 60;
 		wait1Msec(500);
 		SensorValue[pistonOne] = 1;
 		SensorValue[pistonTwo] = 1;
 		SensorValue[backLeft] = 0;
 		SensorValue[backRight] = 0;
 		//preload scoring block end

 		//Move to grab cone block start
 		k = 0;
 		while (k < 3)
 		{
 			SensorValue[backLeft] = 0;
 			SensorValue[backRight] = 0;
	 		if ((backLeft <= 3600) && (backRight <= 3600))
	 		{
	 			motor(frontLeft)  = -127;
	 			motor(backLeft) = -127;
	 			motor(frontRight) = 127;
	 			motor(backRight) = 127;
	 		}
	 		else
	 		{
	 			motor(frontLeft)  = -127;
	 			motor(backLeft) = -127;
	 			motor(frontRight) = 127;
	 			motor(backRight) = 127;
 				motor(frictionDrum2) = 60;
	 			wait1Msec(500);
	 			while ((liftLeft > 0) && (liftRight > 0))
	 			{
		 		motor(liftLeft) = 60;
	 			motor(liftRight) = 60;
	 			}
	 			wait1Msec(500);
 				motor(frictionDrum2) = 10;
	 			while((liftLeft < 360) && (liftRight < 360))
	 			{
		 		motor(liftLeft) = 60;
	 			motor(liftRight) = 60;
	 			}
	 			wait1Msec(500);
	 			SensorValue[pistonOne] = 0;
 				SensorValue[pistonTwo] = 0;
	 			wait1Msec(500);
 				motor(frictionDrum2) = -60;
	 			wait1Msec(500);
	 			SensorValue[pistonOne] = 1;
 				SensorValue[pistonTwo] = 1;
	 			wait1Msec(500);
 				motor(frictionDrum2) = 60;
	 			wait1Msec(500);
				}
				k = k + 1;
			}
		motor[liftLeft]=127;
		motor[liftRight]=127;
		wait(0.1);
		motor[backLeft]=-127;
		motor[backRight]=127;
		motor[frontLeft]=-127;
		motor[frontRight]=127;
		wait1Msec(1500);
		motor[backLeft]=0;
		motor[backRight]=0;
		motor[frontLeft]=0;
		motor[frontRight]=0;
		wait1Msec(5);
		motor[liftRight]=-50;
		motor[liftLeft]=-50;
		wait1Msec(5);
		SensorValue[pistonOne]=1;
		SensorValue[pistonTwo] = 1;
		wait1Msec(1500);
		SensorValue[pistonOne]=0;
		SensorValue[pistonTwo] = 0;
		wait1Msec(100);
		motor[liftLeft]=127;
		motor[liftRight]=127;
		wait1Msec(100);
		motor[backLeft]=127;
		motor[backRight]=-127;
		motor[frontLeft]=127;
		motor[frontRight]=-127;
		wait1Msec(2000);
		motor[liftLeft] = -127;
		motor[liftRight] = -127;
		wait1Msec(2000);
 	}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{

SensorValue[liftLeft] = 0;
SensorValue[liftRight] = 0;
  while (true)
  {
		// Y component, X component, Rotation
		motor[frontLeft] = C1LY - C1LX - C1RX;
		motor[frontRight] =  -C1LY - C1LX - C1RX;
		motor[backRight] =  C1LY + C1LX - C1RX;
		motor[backLeft] = -C1LY + C1LX - C1RX;

		// Lift Controls
		if(vexRT [Btn5U] == 1)
		{
			motor[liftRight] = 127;
			motor[liftLeft] = 127;

		}
		else if(vexRT[Btn5D] == 1)
		{

			motor[liftRight] = -127;
			motor[liftLeft] = -127;

		}
		else
		{
			motor[liftRight] = 10;
			motor[liftLeft] = 10;
		}
		// Friction Drum Controls
		if(vexRT[Btn6U] == 1)
		{
			motor[frictionDrum2] = 127;

		}
		else if(vexRT[Btn6D] == 1)
		{
			motor[frictionDrum2] = -127;
		}
		else
		{
			motor[frictionDrum2] = 10;
		}
		//Pneumatics
		if (vexRT[Btn8U] == 1)
		{
			SensorValue[pistonOne]=0;
			SensorValue[pistonTwo]=0;

		}
		else if (vexRT[Btn8D] == 1)
		{
			SensorValue[pistonOne]=1;
			SensorValue[pistonTwo]=1;
  	}

  	//Hold Power For Specific Heights
  	if (vexRT[Btn7L] == 1)
  	{
  			if(vexRT [Btn5U] == 1)
			{
				motor[liftRight] = 60;
				motor[liftLeft] = 60;

			}
				else if(vexRT[Btn5D] == 1)
			{

				motor[liftRight] = -60;
				motor[liftLeft] = -60;

			}
  	}
  	//Hold Power For Specific Heights
  	
  	//Mid Range
  while (vexRT [Btn7R] == 1)
  {
  		if (SensorValue[liftRight] < 180)
  		{
  			motor[liftRight] = 127;
  			motor[liftLeft] = 127;
  		}
  		else if (SensorValue[liftRight] > 180)
  		{
  			motor[liftRight] = -127;
  			motor[liftLeft] = -127;
  		}
  		else
  		{
  			motor[liftRight] = 0;
  			motor[liftLeft] = 0;
  		}
  	}
  	//Top Range
  while (vexRT [Btn7U] == 1)
  {
  		if (SensorValue[liftRight] < 360)
  		{
  			motor[liftRight] = 127;
  			motor[liftLeft] = 127;
  		}
  		else
  		{
  			motor[liftRight] = 0;
  			motor[liftLeft] = 0;
  		}
  }
  //Bottom Range
  while (vexRT [Btn7D] == 1)
  {
  		if (SensorValue[liftRight] > 0)
  		{
  			motor[liftRight] = -127;
  			motor[liftLeft] = -127;
  		}
  		else
  		{
  			motor[liftRight] = 0;
  			motor[liftLeft] = 0;
  		}
  	}
  }
  }
