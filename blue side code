#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in3,    gyroSens,       sensorGyro)
#pragma config(Sensor, dgtl1,  pistonOne,      sensorDigitalOut)
#pragma config(Sensor, dgtl2,  pistonTwo,      sensorDigitalOut)
#pragma config(Sensor, dgtl12, ,               sensorTouch)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           backLeft,      tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port3,           backRight,     tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port4,           liftRight,     tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port5,           liftLeft,      tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port6,            ,             tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, None)
#pragma config(Motor,  port7,            ,             tmotorVex393TurboSpeed_MC29, openLoop, driveRight, encoderPort, None)
#pragma config(Motor,  port8,           frontLeft,     tmotorVex393TurboSpeed_MC29, openLoop, driveLeft, encoderPort, None)
#pragma config(Motor,  port9,           frontRight,    tmotorVex393TurboSpeed_MC29, openLoop, driveRight)
#pragma config(Motor,  port10,          frictionDrum2, tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"
#define C1LX vexRT[Ch4]
#define C1LY vexRT[Ch3]
#define C1RX vexRT[Ch1]


/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{

	SensorValue[pistonOne] = 1;
	SensorValue[pistonTwo] = 1;
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;

	SensorValue[I2C_3] = 0;
	while((SensorValue[I2C_3] <= 700))
	{
		motor[liftLeft] = 125;
		motor[liftRight] = 125;
	}
	motor[liftLeft] = 0;
	motor[liftRight] = 0;
	wait1Msec(900);
	motor[frictionDrum2] = 10;

	wait1Msec(100);
	//first forward
	while((abs(SensorValue[I2C_1]) >= 0) && (SensorValue[I2C_1] <= 240))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = -60;
		motor[backRight] = 60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	//Pre-Load score

	SensorValue[pistonOne] = 1;
	SensorValue[pistonTwo] = 1;
	wait1Msec(100);
	wait1Msec(500);
	motor[frictionDrum2] = -127;
	wait1Msec(200);
	motor[frictionDrum2] = 0;
	wait1Msec(2000);
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//first backward
	while((SensorValue[I2C_1] <= 0) && (SensorValue[I2C_1] >= -200))
	{
		motor[frontLeft] = -60;
		motor[frontRight] = 60;
		motor[backRight] = -60;
		motor[backLeft] = 60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//first turn
	while((SensorValue[I2C_2] >= 0) && (SensorValue[I2C_2] <= 200))
	{
		motor[frontLeft] = -60;
		motor[frontRight] = -60;
		motor[backRight] = -60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;


	//second forward
	while((SensorValue[I2C_1] < 560))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = -60;
		motor[backRight] = 60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	while((SensorValue[I2C_3] >= 0))
	{
		motor[liftLeft] = -125;
		motor[liftRight] = -125;
	}
	motor[liftLeft] = 0;
	motor[liftRight] = 0;
	wait1Msec(600);
	motor[frictionDrum2] = 127;
	wait1Msec(1000);
	motor[frictionDrum2] = 10;
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	wait1Msec(100);
	//second turn
	while((SensorValue[I2C_1] >= -510))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = 60;
		motor[backRight] = 60;
		motor[backLeft] = 60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	while((SensorValue[I2C_3] <= 725))
	{
		motor[liftLeft] = 125;
		motor[liftRight] = 125;
	}
	motor[liftLeft] = 0;
	motor[liftRight] = 0;
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//third forward
	while((SensorValue[I2C_1] < 260))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = -60;
		motor[backRight] = 60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	motor[frictionDrum2] = -127;
	wait1Msec(500);
	motor[frictionDrum2] = 0;
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//second backward
	while((SensorValue[I2C_1] > -240))
	{
		motor[frontLeft] = -60;
		motor[frontRight] = 60;
		motor[backRight] = -60;
		motor[backLeft] = 60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	//third turn
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	while((SensorValue[I2C_1] < 360))
	{
		motor[frontLeft] = -60;
		motor[frontRight] = -60;
		motor[backRight] = -60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//fifth forward
	while((SensorValue[I2C_1] < 250))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = -60;
		motor[backRight] = 60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	while((SensorValue[I2C_3] >= 0))
	{
		motor[liftLeft] = -125;
		motor[liftRight] = -125;
	}
	motor[liftLeft] = 0;
	motor[liftRight] = 0;
	wait1Msec(600);
	motor[frictionDrum2] = 127;
	wait1Msec(1000);
	motor[frictionDrum2] = 10;
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	while (SensorValue[I2C_1] > 150)
	{
		motor[frontLeft] = 60;
		motor[frontRight] = 60;
		motor[backLeft] = 60;
		motor[backRight] = 60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backLeft] = 0;
	motor[backRight] = 0;
	wait1Msec(100);
	while((SensorValue[I2C_3] <=750))
	{
		motor[liftLeft] = 125;
		motor[liftRight] = 125;
	}
	wait1Msec(100);
	SensorValue[I2C_1] = 0;
	SensorValue[I2C_2] = 0;
	//fifth forward
	while((SensorValue[I2C_1] < 150))
	{
		motor[frontLeft] = 60;
		motor[frontRight] = -60;
		motor[backRight] = 60;
		motor[backLeft] = -60;
	}
	motor[frontLeft] = 0;
	motor[frontRight] = 0;
	motor[backRight] = 0;
	motor[backLeft] = 0;
	wait1Msec(100);
	motor[frictionDrum2] = -127;
	wait1Msec(500);
	motor[frictionDrum2] = 0;
}








task usercontrol()
{

SensorValue[liftLeft] = 0;
SensorValue[liftRight] = 0;
while (true)
{
	// Y component, X component, Rotation
	motor[frontLeft] = C1LY - C1LX - C1RX;
	motor[frontRight] =  -C1LY - C1LX - C1RX;
	motor[backRight] =  C1LY + C1LX - C1RX;
	motor[backLeft] = -C1LY + C1LX - C1RX;

	// Lift Controls
	if(vexRT [Btn5U] == 1)
	{
		motor[liftRight] = 127;
		motor[liftLeft] = 127;

	}
	else if(vexRT[Btn5D] == 1)
	{

		motor[liftRight] = -127;
		motor[liftLeft] = -127;

	}
	else
	{
		motor[liftRight] = 10;
		motor[liftLeft] = 10;
	}
	// Friction Drum Controls
	if(vexRT[Btn6U] == 1)
	{
		motor[frictionDrum2] = 127;

	}
	else if(vexRT[Btn6D] == 1)
	{
		motor[frictionDrum2] = -127;
	}
	else
	{
		motor[frictionDrum2] = 10;
	}
	//Pneumatics
	if (vexRT[Btn8D] == 1)
	{
		SensorValue[pistonOne]=0;
		SensorValue[pistonTwo]=0;

	}
	else if (vexRT[Btn8U] == 1)
	{
		SensorValue[pistonOne]=1;
		SensorValue[pistonTwo]=1;
	}

	//Hold Power For Specific Heights

	while (vexRT [Btn7R] == 1)
	{
		if (nMotorEncoder[I2C_3] < 417)
		{
			motor[liftRight] = 127;
			motor[liftLeft] = 127;
		}
		else if (nMotorEncoder[I2C_3] > 417)
		{
			motor[liftRight] = -127;
			motor[liftLeft] = -127;
		}
		else
		{
			motor[liftRight] = 10;
			motor[liftLeft] = 10;
		}
	}
	//Top Range
	while (vexRT [Btn7U] == 1)
	{
		if (nMotorEncoder[I2C_3] < 800)
		{
			motor[liftRight] = 127;
			motor[liftLeft] = 127;
		}
		else
		{
			motor[liftRight] = 10;
			motor[liftLeft] = 10;
		}
	}
	//Bottom Range
	while (vexRT [Btn7D] == 1)
	{
		if (nMotorEncoder[I2C_3] > 0)
		{
			motor[liftRight] = -127;
			motor[liftLeft] = -127;
		}
		else
		{
			motor[liftRight] = 0;
			motor[liftLeft] = 0;
		}
	}
}
}
